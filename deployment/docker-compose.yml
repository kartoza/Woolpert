version: '3.9'

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: ${COMPOSE_PROJECT_NAME}/django:4.0.x
  build:
    context: ../
    dockerfile: deployment/docker/Dockerfile
    target: prod
  restart: on-failure
  env_file:
    - .env
  volumes:
    - ../src:/usr/src/woolpert
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp
  depends_on:
    db:
      condition: service_healthy
    geoserver:
      condition: service_healthy

services:

  # Our custom django application. It includes Geonode.
  django:
    <<: *default-common-django
    container_name: ${COMPOSE_PROJECT_NAME}_django
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    environment:
      - IS_CELERY=False
    entrypoint: [ "/usr/src/woolpert/entrypoint.sh" ]
    command: "uwsgi --ini /usr/src/woolpert/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    <<: *default-common-django
    container_name: ${COMPOSE_PROJECT_NAME}_celery
    depends_on:
      - django
    environment:
      - IS_CELERY=True
    entrypoint: [ ]
    command: "celery-cmd"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    image: geonode/nginx:1.23.3
    build: ./docker/nginx/
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    restart: on-failure

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: geonode/letsencrypt:4.master
    build: ./docker/letsencrypt/
    container_name: letsencrypt4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - nginx-certificates:/geonode-certificates
    restart: on-failure

  # Geoserver backend
  geoserver:
    image: kartoza/geoserver:geonode-2.23.0.x
    container_name: ${COMPOSE_PROJECT_NAME}_geoserver
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/ows"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - ../scripts:/geo_scripts
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      data-dir-conf:
        condition: service_healthy

  data-dir-conf:
    image: geonode/geoserver_data:2.23.1
    container_name: ${COMPOSE_PROJECT_NAME}_gsconf
    entrypoint: sleep infinity
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    restart: on-failure
    healthcheck:
      test: "ls -A '/geoserver_data/data' | wc -l"

  # PostGIS database.
  db:
    image: kartoza/postgis:15-3.3
    container_name: db4${COMPOSE_PROJECT_NAME}
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=${GEONODE_DATABASE},${GEONODE_GEODATABASE},
      - GEONODE_DATABASE_USER=${GEONODE_DATABASE_USER}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE_USER=${GEONODE_GEODATABASE_USER}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    volumes:
      - dbdata:/var/lib/postgresql
      - ./db_data:/data
      - ../scripts/setup-db.sh:/docker-entrypoint-initdb.d/setup-db.sh
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${GEONODE_DATABASE}"
    # uncomment to enable remote connections to postgres
    ports:
      - "5432"
  dbbackups:
    image: kartoza/pg-backup:15-3.3
    volumes:
      - dbbackups:/backups
    environment:
      - DUMPPREFIX=PGdb
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

  # django application for development
  dev:
    <<: *default-common-django
    image: ${COMPOSE_PROJECT_NAME}/django_dev:4.0.x
    container_name: ${COMPOSE_PROJECT_NAME}_dev
    entrypoint: [ ]
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.dev
      target: dev
    depends_on:
      - geoserver
      - db
      - celery
    ports:
      # for django test server
      - "4002:8090"
      # for ssh
      - "4003:22"

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  nginx-certificates:
    name: ${COMPOSE_PROJECT_NAME}-nginxcerts
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  backup-restore:
    name: ${COMPOSE_PROJECT_NAME}-backup-restore
  data:
    name: ${COMPOSE_PROJECT_NAME}-data
  tmp:
    name: ${COMPOSE_PROJECT_NAME}-tmp
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq